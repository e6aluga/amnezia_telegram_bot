from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, filters
import psutil
import time

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç!')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ç–µ–≤—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
async def system_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        net_io_start = psutil.net_io_counters()
        time.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
        net_io_end = psutil.net_io_counters()

        bytes_sent = net_io_end.bytes_sent - net_io_start.bytes_sent
        bytes_recv = net_io_end.bytes_recv - net_io_start.bytes_recv

        sent_bits_per_sec = bytes_sent * 8
        recv_bits_per_sec = bytes_recv * 8

        max_speed_bits_per_sec = 200 * 10**6  # 200 –ú–±–∏—Ç/—Å

        net_sent_percent = (sent_bits_per_sec / max_speed_bits_per_sec) * 100
        net_recv_percent = (recv_bits_per_sec / max_speed_bits_per_sec) * 100

        cpu_usage = psutil.cpu_percent(interval=1)
        memory_usage = psutil.virtual_memory().percent

        response = (
            f"–°–µ—Ä–≤–µ—Ä: 89.150.59.40 (Netherlands üá≥üá±)\n"
            f"CPU: {cpu_usage}%\n"
            f"–ü–∞–º—è—Ç—å: {memory_usage}%\n"
            f"–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ç—å:\n"
            f"  –û—Ç–ø—Ä–∞–≤–∫–∞: {net_sent_percent:.2f}%\n"
            f"  –ü–æ–ª—É—á–µ–Ω–∏–µ: {net_recv_percent:.2f}%"
        )

        await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
def main():
    application = Application.builder().token("").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
    application.add_handler(CommandHandler("start", start, filters=filters.COMMAND))
    application.add_handler(CommandHandler("stats", system_stats, filters=filters.COMMAND))

    application.run_polling()

if __name__ == '__main__':
    main()
